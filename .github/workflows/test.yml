name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version detection
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs
    
    - name: Install dependencies
      run: |
        pip install -e .[test]
    
    - name: Run comprehensive tests
      run: |
        python scripts/test_runner.py
    
    - name: Test CLI functionality
      run: |
        uubed info
        echo "Testing CLI encode/decode..."
        echo "test data" > test.txt
        uubed encode test.txt -m eq64 -o encoded.txt || echo "Encode failed, continuing..."
        if [ -f encoded.txt ]; then
          uubed decode encoded.txt -m eq64 -o decoded.txt || echo "Decode failed, continuing..."
        fi
    
    - name: Test package imports
      run: |
        python -c "import uubed; print(f'uubed version: {uubed.__version__}')"
        python -c "from uubed.integrations import vectordb; print('Vector DB integration works')"
        python -c "from uubed import gpu; print('GPU module works (fallback expected)')"
        python -c "from uubed import matryoshka; print('Matryoshka module works')"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

  test-minimal-install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Test minimal installation
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs
        # Install only core dependencies
        pip install numpy click rich toml
        pip install -e . --no-deps
        python -c "import uubed; print(f'Minimal install works: {uubed.__version__}')"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json