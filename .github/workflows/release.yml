name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs
    
    - name: Install dependencies
      run: |
        pip install -e .[test]
    
    - name: Run tests
      run: |
        python scripts/test_runner.py

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs
    
    - name: Build wheels
      run: |
        python scripts/build.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist-temp/
    
    - name: Consolidate artifacts
      run: |
        mkdir -p dist/
        find dist-temp/ -name "*.whl" -exec cp {} dist/ \;
        find dist-temp/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Build source distribution
      run: |
        python scripts/build.py
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        verbose: true

  create-release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: generate_notes
      run: |
        # Extract version from tag
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        # Create release notes
        echo "## Release $VERSION" > release-notes.md
        echo "" >> release-notes.md
        echo "### Changes" >> release-notes.md
        
        # Try to extract changelog section
        if [ -f CHANGELOG.md ]; then
          awk "/^## \[$VERSION\]/,/^## \[/{if(/^## \[/ && NR>1) exit; print}" CHANGELOG.md >> release-notes.md || true
        fi
        
        # Add installation instructions
        echo "" >> release-notes.md
        echo "### Installation" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install uubed==$VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        
        # Add upgrade instructions
        echo "" >> release-notes.md
        echo "### Upgrade" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install --upgrade uubed" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        
        cat release-notes.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: ${{ steps.get_version.outputs.VERSION }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
    
    - name: Upload wheel artifacts to release
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: dist/
