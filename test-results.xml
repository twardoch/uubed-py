<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="24" skipped="5" tests="223" time="6.768" timestamp="2025-07-17T21:58:07.169232+00:00" hostname="e2b.local"><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_very_small_embeddings" time="0.015" /><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_small_embeddings" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_medium_embeddings" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_large_embeddings" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_empty_embedding" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoMethodSelection" name="test_auto_select_edge_cases" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoDetectMethod" name="test_detect_eq64_method" time="0.001" /><testcase classname="tests.test_additional_coverage.TestAutoDetectMethod" name="test_detect_non_eq64_method" time="0.002" /><testcase classname="tests.test_additional_coverage.TestConfigurationIntegration" name="test_auto_method_with_config_default" time="0.002" /><testcase classname="tests.test_additional_coverage.TestConfigurationIntegration" name="test_method_specific_config_parameters" time="0.002" /><testcase classname="tests.test_additional_coverage.TestConfigurationIntegration" name="test_config_parameter_override" time="0.002" /><testcase classname="tests.test_additional_coverage.TestMemoryManagement" name="test_memory_estimation_accuracy" time="0.001" /><testcase classname="tests.test_additional_coverage.TestMemoryManagement" name="test_memory_validation_with_estimation" time="0.002"><failure message="Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedResourceError'&gt;">tests/test_additional_coverage.py:231: in test_memory_validation_with_estimation
    with pytest.raises(UubedResourceError, match="too high"):
E   Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedResourceError'&gt;</failure></testcase><testcase classname="tests.test_additional_coverage.TestMemoryManagement" name="test_memory_validation_in_encode" time="0.004"><failure message="uubed.exceptions.UubedValidationError: Embedding size (1000000) is too large for the 'eq64' method.&#10;Parameter 'embedding': expected size &lt;= 100000 (any positive size), got size 1000000&#10;&#10;Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64&#10;Error Code: VALIDATION_ERROR">tests/test_additional_coverage.py:245: in test_memory_validation_in_encode
    encoded = encode(huge_embedding, method="eq64")
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/api.py:124: in encode
    embedding_array: np.ndarray = validate_embedding_input(embedding, method)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/validation.py:250: in validate_embedding_input
    _validate_embedding_dimensions(arr, method)
src/uubed/validation.py:345: in _validate_embedding_dimensions
    raise validation_error(
E   uubed.exceptions.UubedValidationError: Embedding size (1000000) is too large for the 'eq64' method.
E   Parameter 'embedding': expected size &lt;= 100000 (any positive size), got size 1000000
E   
E   Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64
E   Error Code: VALIDATION_ERROR</failure></testcase><testcase classname="tests.test_additional_coverage.TestExceptionHandling" name="test_exception_chain_preservation" time="0.001" /><testcase classname="tests.test_additional_coverage.TestExceptionHandling" name="test_error_context_information" time="0.001" /><testcase classname="tests.test_additional_coverage.TestExceptionHandling" name="test_exception_inheritance" time="0.001" /><testcase classname="tests.test_additional_coverage.TestExceptionHandling" name="test_error_message_quality" time="0.002"><failure message="assert 'parameter' in &quot;Embedding cannot be empty\nParameter 'embedding': expected non-empty array-like of integers 0-255, got empty list/tuple\nError Code: VALIDATION_ERROR&quot;">tests/test_additional_coverage.py:300: in test_error_message_quality
    encode([], method="eq64")
src/uubed/api.py:124: in encode
    embedding_array: np.ndarray = validate_embedding_input(embedding, method)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/validation.py:155: in validate_embedding_input
    raise validation_error(
E   uubed.exceptions.UubedValidationError: Embedding cannot be empty
E   Parameter 'embedding': expected non-empty array-like of integers 0-255, got empty list/tuple
E   Error Code: VALIDATION_ERROR

During handling of the above exception, another exception occurred:
tests/test_additional_coverage.py:304: in test_error_message_quality
    assert "parameter" in message
E   assert 'parameter' in "Embedding cannot be empty\nParameter 'embedding': expected non-empty array-like of integers 0-255, got empty list/tuple\nError Code: VALIDATION_ERROR"</failure></testcase><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_unicode_handling" time="0.001" /><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_large_input_handling" time="0.032" /><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_concurrent_access" time="0.011" /><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_system_resource_limits" time="0.195" /><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_invalid_parameter_combinations" time="0.003"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: 'too small for the'&#10; Input: &quot;k parameter (32) must be smaller than embedding size (32)\nParameter 'k': expected &lt; 32, got 32\nError Code: VALIDATION_ERROR&quot;">tests/test_additional_coverage.py:414: in test_invalid_parameter_combinations
    encode(test_data, method="t8q64", k=32)
src/uubed/api.py:151: in encode
    raise validation_error(
E   uubed.exceptions.UubedValidationError: k parameter (32) must be smaller than embedding size (32)
E   Parameter 'k': expected &lt; 32, got 32
E   Error Code: VALIDATION_ERROR

During handling of the above exception, another exception occurred:
tests/test_additional_coverage.py:413: in test_invalid_parameter_combinations
    with pytest.raises(UubedValidationError, match="too small for the"):
E   AssertionError: Regex pattern did not match.
E    Regex: 'too small for the'
E    Input: "k parameter (32) must be smaller than embedding size (32)\nParameter 'k': expected &lt; 32, got 32\nError Code: VALIDATION_ERROR"</failure></testcase><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_boundary_conditions" time="0.002" /><testcase classname="tests.test_additional_coverage.TestEdgeCasesAndRobustness" name="test_method_specific_validation" time="0.004" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_encode_bytes" time="0.001" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_encode_list" time="0.001" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_encode_numpy_array" time="0.001" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_encode_decode_roundtrip" time="0.001" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_all_encoding_methods" time="0.002" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_auto_method_selection" time="0.002" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_invalid_input_values" time="0.002" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_decode_invalid_method" time="0.003" /><testcase classname="tests.test_api.TestEncodeDecode" name="test_method_specific_parameters" time="0.002" /><testcase classname="tests.test_api.TestInputValidation" name="test_empty_input" time="0.002" /><testcase classname="tests.test_api.TestInputValidation" name="test_invalid_method" time="0.003" /><testcase classname="tests.test_api.TestInputValidation" name="test_decode_auto_detection" time="0.001" /><testcase classname="tests.test_api.TestInputValidation" name="test_decode_auto_detection_failure" time="0.001" /><testcase classname="tests.test_api.TestDataTypes" name="test_numpy_float_to_uint8" time="0.001" /><testcase classname="tests.test_api.TestDataTypes" name="test_numpy_different_dtypes" time="0.002" /><testcase classname="tests.test_api.TestEdgeCases" name="test_single_byte" time="0.001" /><testcase classname="tests.test_api.TestEdgeCases" name="test_all_zeros" time="0.001" /><testcase classname="tests.test_api.TestEdgeCases" name="test_all_max_values" time="0.001" /><testcase classname="tests.test_api.TestEdgeCases" name="test_large_embedding" time="0.010" /><testcase classname="tests.test_api.TestConsistency" name="test_deterministic_encoding" time="0.002" /><testcase classname="tests.test_api.TestConsistency" name="test_method_independence" time="0.002" /><testcase classname="tests.test_cli.TestCLIBasic" name="test_cli_help" time="0.005" /><testcase classname="tests.test_cli.TestCLIBasic" name="test_cli_version" time="0.002" /><testcase classname="tests.test_cli.TestCLIBasic" name="test_info_command" time="0.046" /><testcase classname="tests.test_cli.TestEncodeCommand" name="test_encode_help" time="0.003" /><testcase classname="tests.test_cli.TestEncodeCommand" name="test_encode_from_file" time="0.003" /><testcase classname="tests.test_cli.TestEncodeCommand" name="test_encode_to_file" time="0.009" /><testcase classname="tests.test_cli.TestEncodeCommand" name="test_encode_different_methods" time="0.010" /><testcase classname="tests.test_cli.TestEncodeCommand" name="test_encode_stdin" time="0.003" /><testcase classname="tests.test_cli.TestDecodeCommand" name="test_decode_help" time="0.003" /><testcase classname="tests.test_cli.TestDecodeCommand" name="test_encode_decode_roundtrip" time="0.014" /><testcase classname="tests.test_cli.TestDecodeCommand" name="test_decode_stdin" time="0.004" /><testcase classname="tests.test_cli.TestBenchCommand" name="test_bench_help" time="0.003" /><testcase classname="tests.test_cli.TestBenchCommand" name="test_bench_basic" time="0.035" /><testcase classname="tests.test_cli.TestBenchCommand" name="test_bench_specific_method" time="0.013" /><testcase classname="tests.test_cli.TestBenchCommand" name="test_bench_all_methods" time="0.024" /><testcase classname="tests.test_cli.TestCLIErrorHandling" name="test_encode_nonexistent_file" time="0.003" /><testcase classname="tests.test_cli.TestCLIErrorHandling" name="test_decode_invalid_method" time="0.002" /><testcase classname="tests.test_cli.TestCLIErrorHandling" name="test_invalid_method" time="0.003" /><testcase classname="tests.test_cli.TestCLIIntegration" name="test_pipeline_workflow" time="0.026" /><testcase classname="tests.test_config.TestUubedConfig" name="test_default_config_initialization" time="0.001" /><testcase classname="tests.test_config.TestUubedConfig" name="test_config_get_with_default" time="0.001" /><testcase classname="tests.test_config.TestUubedConfig" name="test_config_set_get" time="0.001" /><testcase classname="tests.test_config.TestUubedConfig" name="test_load_toml_config" time="0.005" /><testcase classname="tests.test_config.TestUubedConfig" name="test_load_json_config" time="0.002" /><testcase classname="tests.test_config.TestUubedConfig" name="test_auto_detect_format" time="0.003" /><testcase classname="tests.test_config.TestUubedConfig" name="test_config_merge" time="0.002" /><testcase classname="tests.test_config.TestUubedConfig" name="test_save_config" time="0.015" /><testcase classname="tests.test_config.TestUubedConfig" name="test_get_encoding_params" time="0.003"><failure message="assert 128 == 64">tests/test_config.py:219: in test_get_encoding_params
    assert shq64_params["planes"] == 64
E   assert 128 == 64</failure></testcase><testcase classname="tests.test_config.TestUubedConfig" name="test_config_sections" time="0.002"><failure message="assert 500 == 100">tests/test_config.py:234: in test_config_sections
    assert streaming_config["default_batch_size"] == 100
E   assert 500 == 100</failure></testcase><testcase classname="tests.test_config.TestUubedConfig" name="test_reset_to_defaults" time="0.003"><failure message="AssertionError: assert 'custom' == 'auto'&#10;  &#10;  - auto&#10;  + custom">tests/test_config.py:254: in test_reset_to_defaults
    assert config.get("encoding.default_method") == "auto"
E   AssertionError: assert 'custom' == 'auto'
E     
E     - auto
E     + custom</failure></testcase><testcase classname="tests.test_config.TestUubedConfig" name="test_to_dict" time="0.002"><failure message="AssertionError: assert 'modified' == 'auto'&#10;  &#10;  - auto&#10;  + modified">tests/test_config.py:270: in test_to_dict
    assert config.get("encoding.default_method") == "auto"
E   AssertionError: assert 'modified' == 'auto'
E     
E     - auto
E     + modified</failure></testcase><testcase classname="tests.test_config.TestConfigurationErrors" name="test_load_nonexistent_file" time="0.003"><failure message="TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'">tests/test_config.py:279: in test_load_nonexistent_file
    UubedConfig("nonexistent_config.toml")
src/uubed/config.py:54: in __init__
    self.load_config(config_file)
src/uubed/config.py:94: in load_config
    raise configuration_error(
src/uubed/exceptions.py:394: in configuration_error
    return UubedConfigurationError(
E   TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'</failure></testcase><testcase classname="tests.test_config.TestConfigurationErrors" name="test_load_invalid_json" time="0.003"><failure message="TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'">src/uubed/config.py:105: in load_config
    config_data = json.load(f)
                  ^^^^^^^^^^^^
/usr/lib/python3.12/json/__init__.py:293: in load
    return loads(fp.read(),
/usr/lib/python3.12/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.12/json/decoder.py:355: in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
E   json.decoder.JSONDecodeError: Expecting value: line 1 column 13 (char 12)

During handling of the above exception, another exception occurred:
tests/test_config.py:289: in test_load_invalid_json
    UubedConfig(temp_path)
src/uubed/config.py:54: in __init__
    self.load_config(config_file)
src/uubed/config.py:120: in load_config
    raise configuration_error(
src/uubed/exceptions.py:394: in configuration_error
    return UubedConfigurationError(
E   TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'</failure></testcase><testcase classname="tests.test_config.TestConfigurationErrors" name="test_load_invalid_toml" time="0.003"><failure message="TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'">src/uubed/config.py:102: in load_config
    config_data = toml.load(f)
                  ^^^^^^^^^^^^
venv/lib/python3.12/site-packages/toml/decoder.py:156: in load
    return loads(f.read(), _dict, decoder)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
venv/lib/python3.12/site-packages/toml/decoder.py:433: in loads
    raise TomlDecodeError("Key group not on a line by itself.",
E   toml.decoder.TomlDecodeError: Key group not on a line by itself. (line 1 column 1 char 0)

During handling of the above exception, another exception occurred:
tests/test_config.py:301: in test_load_invalid_toml
    UubedConfig(temp_path)
src/uubed/config.py:54: in __init__
    self.load_config(config_file)
src/uubed/config.py:126: in load_config
    raise configuration_error(
src/uubed/exceptions.py:394: in configuration_error
    return UubedConfigurationError(
E   TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'</failure></testcase><testcase classname="tests.test_config.TestConfigurationErrors" name="test_save_without_config_file" time="0.004"><failure message="TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'">tests/test_config.py:310: in test_save_without_config_file
    config.save_config()
src/uubed/config.py:201: in save_config
    raise configuration_error(
src/uubed/exceptions.py:394: in configuration_error
    return UubedConfigurationError(
E   TypeError: UubedConfigurationError.__init__() got an unexpected keyword argument 'config_file'</failure></testcase><testcase classname="tests.test_config.TestGlobalConfig" name="test_get_config_singleton" time="0.001" /><testcase classname="tests.test_config.TestGlobalConfig" name="test_load_config_global" time="0.002" /><testcase classname="tests.test_config.TestGlobalConfig" name="test_get_set_setting" time="0.002"><failure message="AssertionError: assert 'global_test' == 'auto'&#10;  &#10;  - auto&#10;  + global_test">tests/test_config.py:353: in test_get_set_setting
    assert get_setting("encoding.default_method") == "auto"
E   AssertionError: assert 'global_test' == 'auto'
E     
E     - auto
E     + global_test</failure></testcase><testcase classname="tests.test_config.TestGlobalConfig" name="test_create_default_config" time="0.012"><failure message="AssertionError: assert 'modified' == 'auto'&#10;  &#10;  - auto&#10;  + modified">tests/test_config.py:375: in test_create_default_config
    assert config.get("encoding.default_method") == "auto"
E   AssertionError: assert 'modified' == 'auto'
E     
E     - auto
E     + modified</failure></testcase><testcase classname="tests.test_config.TestConfigDefaultSearch" name="test_default_search_order" time="0.004" /><testcase classname="tests.test_encoders.TestQ64" name="test_encode_decode_roundtrip" time="0.001" /><testcase classname="tests.test_encoders.TestQ64" name="test_position_safety" time="0.001" /><testcase classname="tests.test_encoders.TestQ64" name="test_invalid_decode" time="0.004" /><testcase classname="tests.test_encoders.TestHighLevelAPI" name="test_auto_encode" time="0.001"><failure message="uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'&#10;Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test&#10;&#10;Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64&#10;Error Code: VALIDATION_ERROR">tests/test_encoders.py:57: in test_auto_encode
    small_result = encode(small_embedding, method="auto")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/api.py:119: in encode
    method = validate_encoding_method(default_method)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/validation.py:69: in validate_encoding_method
    raise validation_error(
E   uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'
E   Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test
E   
E   Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64
E   Error Code: VALIDATION_ERROR</failure></testcase><testcase classname="tests.test_encoders.TestHighLevelAPI" name="test_all_methods" time="0.002"><failure message="AssertionError: assert 32 == 16&#10; +  where 32 = len('Dbg9HelyJepzNft9Jej4FdkwJSuyBSu5')">tests/test_encoders.py:71: in test_all_methods
    assert len(shq64_result) == 16  # 64 bits = 8 bytes = 16 chars
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 32 == 16
E    +  where 32 = len('Dbg9HelyJepzNft9Jej4FdkwJSuyBSu5')</failure></testcase><testcase classname="tests.test_encoders.TestHighLevelAPI" name="test_decode_eq64" time="0.001" /><testcase classname="tests.test_encoders.TestLocalityPreservation" name="test_simhash_locality" time="0.003" /><testcase classname="tests.test_encoders.TestLocalityPreservation" name="test_topk_locality" time="0.001" /><testcase classname="tests.test_error_handling.TestExceptionHierarchy" name="test_base_exception" time="0.001" /><testcase classname="tests.test_error_handling.TestExceptionHierarchy" name="test_validation_error" time="0.001" /><testcase classname="tests.test_error_handling.TestExceptionHierarchy" name="test_encoding_error" time="0.001" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_encoding_method" time="0.001" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_embedding_input_list" time="0.007" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_embedding_input_numpy" time="0.002" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_embedding_input_bytes" time="0.001" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_method_parameters" time="0.001" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_validate_file_path" time="0.002" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_memory_validation" time="0.001" /><testcase classname="tests.test_error_handling.TestValidationFunctions" name="test_estimate_memory_usage" time="0.001" /><testcase classname="tests.test_error_handling.TestEnhancedAPIErrorHandling" name="test_encode_validation_errors" time="0.001" /><testcase classname="tests.test_error_handling.TestEnhancedAPIErrorHandling" name="test_decode_validation_errors" time="0.001" /><testcase classname="tests.test_error_handling.TestEnhancedAPIErrorHandling" name="test_auto_method_selection" time="0.001"><failure message="uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'&#10;Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test&#10;&#10;Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64&#10;Error Code: VALIDATION_ERROR">tests/test_error_handling.py:293: in test_auto_method_selection
    result = encode(small_embedding, method="auto")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/api.py:119: in encode
    method = validate_encoding_method(default_method)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/validation.py:69: in validate_encoding_method
    raise validation_error(
E   uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'
E   Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test
E   
E   Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64
E   Error Code: VALIDATION_ERROR</failure></testcase><testcase classname="tests.test_error_handling.TestEnhancedAPIErrorHandling" name="test_float_embedding_conversion" time="0.002" /><testcase classname="tests.test_error_handling.TestGPUValidation" name="test_gpu_validation_no_cupy" time="0.002" /><testcase classname="tests.test_error_handling.TestGPUValidation" name="test_gpu_device_validation" time="0.001"><skipped type="pytest.skip" message="CuPy not available for GPU tests">/root/repo/tests/test_error_handling.py:346: CuPy not available for GPU tests</skipped></testcase><testcase classname="tests.test_error_handling" name="test_exception_inheritance" time="0.001" /><testcase classname="tests.test_error_handling" name="test_error_context_preservation" time="0.001" /><testcase classname="tests.test_integrations.TestLangChainIntegration" name="test_import_langchain_integration" time="0.003"><skipped type="pytest.skip" message="LangChain not available">/root/repo/tests/test_integrations.py:18: LangChain not available</skipped></testcase><testcase classname="tests.test_integrations.TestLangChainIntegration" name="test_uubed_encoder_basic" time="0.001"><skipped type="pytest.skip" message="LangChain not installed in test environment">/root/repo/tests/test_integrations.py:20: LangChain not installed in test environment</skipped></testcase><testcase classname="tests.test_integrations.TestLangChainIntegration" name="test_mock_uubed_encoder" time="0.002" /><testcase classname="tests.test_integrations.TestVectorDBConnectors" name="test_import_vectordb_connectors" time="0.004" /><testcase classname="tests.test_integrations.TestVectorDBConnectors" name="test_connector_factory" time="0.004" /><testcase classname="tests.test_integrations.TestVectorDBConnectors" name="test_mock_chroma_connector" time="0.008" /><testcase classname="tests.test_integrations.TestVectorDBConnectors" name="test_vector_encoding_consistency" time="0.003" /><testcase classname="tests.test_integrations.TestGPUIntegration" name="test_import_gpu_module" time="0.001" /><testcase classname="tests.test_integrations.TestGPUIntegration" name="test_gpu_availability_detection" time="0.001" /><testcase classname="tests.test_integrations.TestGPUIntegration" name="test_gpu_fallback_behavior" time="0.004" /><testcase classname="tests.test_integrations.TestMatryoshkaIntegration" name="test_import_matryoshka_module" time="0.001" /><testcase classname="tests.test_integrations.TestMatryoshkaIntegration" name="test_matryoshka_encoder_basic" time="0.001"><failure message="uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'&#10;Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test&#10;&#10;Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64&#10;Error Code: VALIDATION_ERROR">tests/test_integrations.py:269: in test_matryoshka_encoder_basic
    encoded_levels = encoder.encode_all_levels(embedding)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/matryoshka.py:159: in encode_all_levels
    results[dim] = self.encode_level(
src/uubed/matryoshka.py:132: in encode_level
    return encode(level_embedding, method=encoding_method, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/api.py:119: in encode
    method = validate_encoding_method(default_method)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/uubed/validation.py:69: in validate_encoding_method
    raise validation_error(
E   uubed.exceptions.UubedValidationError: Unknown encoding method: 'global_test'
E   Parameter 'method': expected one of: auto, eq64, mq64, shq64, t8q64, zoq64, got global_test
E   
E   Suggestion: Use one of the supported encoding methods: eq64, shq64, t8q64, zoq64
E   Error Code: VALIDATION_ERROR</failure></testcase><testcase classname="tests.test_integrations.TestMatryoshkaIntegration" name="test_adaptive_matryoshka_encoder" time="0.001" /><testcase classname="tests.test_integrations.TestIntegrationConsistency" name="test_encoding_consistency_across_modules" time="0.003" /><testcase classname="tests.test_integrations.TestIntegrationConsistency" name="test_all_modules_importable" time="0.002"><skipped type="pytest.skip" message="Optional dependency not available: uubed.integrations.langchain">/root/repo/tests/test_integrations.py:333: Optional dependency not available: uubed.integrations.langchain</skipped></testcase><testcase classname="tests.test_integrations.TestIntegrationConsistency" name="test_package_exports" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_is_native_available" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_q64_encode_decode_roundtrip" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_simhash_q64_basic" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_top_k_q64_basic" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_z_order_q64_basic" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_mq64_encode_decode_roundtrip" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_different_input_sizes" time="0.003" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_edge_case_data" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperFunctionality" name="test_method_parameter_handling" time="0.003" /><testcase classname="tests.test_native_wrapper.TestNativeFallback" name="test_fallback_import_behavior" time="0.002" /><testcase classname="tests.test_native_wrapper.TestNativeFallback" name="test_fallback_functions_exist" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeFallback" name="test_fallback_vs_native_consistency" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeFallback" name="test_pure_python_encoder_imports" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeFallback" name="test_performance_difference_detection" time="0.006" /><testcase classname="tests.test_native_wrapper.TestNativeModulePresence" name="test_has_native_flag" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeModulePresence" name="test_native_module_detection" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeModulePresence" name="test_import_error_handling" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeModulePresence" name="test_function_signatures" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperIntegration" name="test_integration_with_api" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperIntegration" name="test_integration_with_streaming" time="0.001" /><testcase classname="tests.test_native_wrapper.TestNativeWrapperIntegration" name="test_error_handling_consistency" time="0.002"><failure message="Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'TypeError'&gt;)">tests/test_native_wrapper.py:362: in test_error_handling_consistency
    with pytest.raises((ValueError, TypeError)):
E   Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'TypeError'&gt;)</failure></testcase><testcase classname="tests.test_native_wrapper.TestNativeWrapperIntegration" name="test_thread_safety" time="0.009" /><testcase classname="tests.test_package" name="test_version" time="0.001" /><testcase classname="tests.test_streaming.TestEncodeStream" name="test_encode_stream_basic" time="0.005" /><testcase classname="tests.test_streaming.TestEncodeStream" name="test_encode_stream_generator" time="0.002" /><testcase classname="tests.test_streaming.TestEncodeStream" name="test_encode_stream_batch_size" time="0.005" /><testcase classname="tests.test_streaming.TestEncodeStream" name="test_encode_stream_empty" time="0.001" /><testcase classname="tests.test_streaming.TestEncodeStream" name="test_encode_stream_different_methods" time="0.005" /><testcase classname="tests.test_streaming.TestEncodeFileStream" name="test_encode_file_stream_basic" time="0.003" /><testcase classname="tests.test_streaming.TestEncodeFileStream" name="test_encode_file_stream_with_output" time="0.005" /><testcase classname="tests.test_streaming.TestEncodeFileStream" name="test_encode_file_stream_incomplete_embedding" time="0.004" /><testcase classname="tests.test_streaming.TestDecodeStream" name="test_decode_stream_basic" time="0.002" /><testcase classname="tests.test_streaming.TestDecodeStream" name="test_decode_stream_with_newlines" time="0.001" /><testcase classname="tests.test_streaming.TestBatchEncode" name="test_batch_encode_basic" time="0.005" /><testcase classname="tests.test_streaming.TestBatchEncode" name="test_batch_encode_different_methods" time="0.013" /><testcase classname="tests.test_streaming.TestBatchEncode" name="test_batch_encode_empty" time="0.002" /><testcase classname="tests.test_streaming.TestStreamingEncoder" name="test_streaming_encoder_basic" time="0.005" /><testcase classname="tests.test_streaming.TestStreamingEncoder" name="test_streaming_encoder_with_file" time="0.003" /><testcase classname="tests.test_streaming.TestStreamingEncoder" name="test_streaming_encoder_count" time="0.001" /><testcase classname="tests.test_streaming.TestStreamingPerformance" name="test_memory_efficiency" time="0.266" /><testcase classname="tests.test_streaming.TestStreamingPerformance" name="test_streaming_vs_batch_consistency" time="0.005" /><testcase classname="tests.test_validation.TestValidateEncodingMethod" name="test_valid_methods" time="0.001" /><testcase classname="tests.test_validation.TestValidateEncodingMethod" name="test_case_insensitive" time="0.001" /><testcase classname="tests.test_validation.TestValidateEncodingMethod" name="test_whitespace_stripping" time="0.001" /><testcase classname="tests.test_validation.TestValidateEncodingMethod" name="test_invalid_method" time="0.001" /><testcase classname="tests.test_validation.TestValidateEncodingMethod" name="test_non_string_input" time="0.002" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_list_input" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_bytes_input" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_numpy_uint8" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_numpy_int" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_numpy_float_normalized" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_valid_numpy_float_0_255" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_none_input" time="0.002" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_empty_list" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_empty_bytes" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_empty_numpy_array" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_out_of_range_list" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_out_of_range_int_array" time="0.003" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_out_of_range_float_array" time="0.002"><failure message="Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedValidationError'&gt;">tests/test_validation.py:164: in test_out_of_range_float_array
    with pytest.raises(UubedValidationError, match="range"):
E   Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedValidationError'&gt;</failure></testcase><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_unsupported_dtype" time="0.003" /><testcase classname="tests.test_validation.TestValidateEmbeddingInput" name="test_unsupported_type" time="0.003" /><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_eq64_dimensions" time="0.007"><failure message="OverflowError: Python integer 256 out of bounds for uint8">tests/test_validation.py:197: in test_eq64_dimensions
    _validate_embedding_dimensions(np.array(range(100001), dtype=np.uint8), "eq64")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   OverflowError: Python integer 256 out of bounds for uint8</failure></testcase><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_shq64_dimensions" time="0.005"><failure message="OverflowError: Python integer 256 out of bounds for uint8">tests/test_validation.py:211: in test_shq64_dimensions
    _validate_embedding_dimensions(np.array(range(50001), dtype=np.uint8), "shq64")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   OverflowError: Python integer 256 out of bounds for uint8</failure></testcase><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_t8q64_dimensions" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_zoq64_dimensions" time="0.001" /><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_mq64_dimensions" time="0.001"><failure message="OverflowError: Python integer 256 out of bounds for uint8">tests/test_validation.py:237: in test_mq64_dimensions
    _validate_embedding_dimensions(np.array(range(1000), dtype=np.uint8), "mq64")
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   OverflowError: Python integer 256 out of bounds for uint8</failure></testcase><testcase classname="tests.test_validation.TestValidateEmbeddingDimensions" name="test_auto_method_skips_validation" time="0.001" /><testcase classname="tests.test_validation.TestValidateMethodParameters" name="test_shq64_parameters" time="0.005" /><testcase classname="tests.test_validation.TestValidateMethodParameters" name="test_t8q64_parameters" time="0.001" /><testcase classname="tests.test_validation.TestValidateMethodParameters" name="test_mq64_parameters" time="0.003" /><testcase classname="tests.test_validation.TestValidateMethodParameters" name="test_no_parameters_methods" time="0.001" /><testcase classname="tests.test_validation.TestValidateMethodParameters" name="test_unknown_parameters" time="0.002" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_valid_batch_size" time="0.001" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_invalid_batch_size" time="0.001" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_valid_max_memory" time="0.001" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_invalid_max_memory" time="0.001" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_both_parameters" time="0.001" /><testcase classname="tests.test_validation.TestValidateBatchParameters" name="test_none_parameters" time="0.001" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_valid_existing_file" time="0.001" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_path_object_input" time="0.001" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_non_existent_file" time="0.002" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_directory_as_file" time="0.002" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_writable_new_file" time="0.001" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_writable_existing_file" time="0.001" /><testcase classname="tests.test_validation.TestValidateFilePath" name="test_non_writable_directory" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedResourceError'&gt;">tests/test_validation.py:496: in test_non_writable_directory
    with pytest.raises(UubedResourceError, match="not writable"):
E   Failed: DID NOT RAISE &lt;class 'uubed.exceptions.UubedResourceError'&gt;</failure></testcase><testcase classname="tests.test_validation.TestValidateFilePath" name="test_invalid_path_type" time="0.003" /><testcase classname="tests.test_validation.TestMemoryValidation" name="test_valid_memory_usage" time="0.001" /><testcase classname="tests.test_validation.TestMemoryValidation" name="test_excessive_memory_usage" time="0.001" /><testcase classname="tests.test_validation.TestMemoryValidation" name="test_custom_memory_limit" time="0.001" /><testcase classname="tests.test_validation.TestMemoryValidation" name="test_estimate_memory_usage" time="0.001" /><testcase classname="tests.test_validation.TestMemoryValidation" name="test_estimate_memory_unknown_method" time="0.001" /><testcase classname="tests.test_validation.TestGPUValidation" name="test_gpu_not_available" time="0.003" /><testcase classname="tests.test_validation.TestGPUValidation" name="test_device_id_validation" time="0.002"><skipped type="pytest.skip" message="CuPy not available for GPU tests">/root/repo/tests/test_validation.py:604: CuPy not available for GPU tests</skipped></testcase><testcase classname="tests.test_validation.TestGPUValidation" name="test_no_device_id" time="0.002" /></testsuite></testsuites>